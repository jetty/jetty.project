//
// ========================================================================
// Copyright (c) 1995-2022 Mort Bay Consulting Pty Ltd and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
// ========================================================================
//

package org.eclipse.jetty.websocket.javax.tests;

import java.net.URI;
import java.util.concurrent.TimeUnit;
import javax.websocket.CloseReason;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.ServerConnector;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;
import org.eclipse.jetty.websocket.javax.server.config.JavaxWebSocketServletContainerInitializer;
import org.eclipse.jetty.websocket.javax.server.internal.JavaxWebSocketServerContainer;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class CloseInOnOpenTest
{
    private Server server;
    private ServerConnector connector;
    private JavaxWebSocketServerContainer serverContainer;
    private JavaxWebSocketClientContainer client;

    @BeforeEach
    public void beforeEach() throws Exception
    {
        server = new Server();

        connector = new ServerConnector(server);
        server.addConnector(connector);

        ServletContextHandler context = new ServletContextHandler();
        context.setContextPath("/");
        server.setHandler(context);

        JavaxWebSocketServletContainerInitializer.configure(context, (servletContext, wsContainer) ->
            wsContainer.addEndpoint(ClosingListener.class));
        server.start();

        serverContainer = JavaxWebSocketServerContainer.getContainer(context.getServletContext());
        assertNotNull(serverContainer);

        client = new JavaxWebSocketClientContainer();
        client.start();
    }

    @AfterEach
    public void afterEach() throws Exception
    {
        client.stop();
        server.stop();
    }

    @Test
    public void testCloseInOnWebSocketConnect() throws Exception
    {
        URI uri = URI.create("ws://localhost:" + connector.getLocalPort() + "/ws");
        EventSocket clientEndpoint = new EventSocket();

        client.connectToServer(clientEndpoint, uri);
        assertTrue(clientEndpoint.closeLatch.await(5, TimeUnit.SECONDS));
        assertThat(clientEndpoint.closeReason.getCloseCode(), is(CloseReason.CloseCodes.VIOLATED_POLICY));

        assertThat(serverContainer.getOpenSessions().size(), is(0));
    }

    @ServerEndpoint("/ws")
    public static class ClosingListener
    {
        @OnOpen
        public void onWebSocketConnect(Session session) throws Exception
        {
            session.close(new CloseReason(CloseReason.CloseCodes.VIOLATED_POLICY, "I am a WS that closes immediately"));
        }
    }
}
